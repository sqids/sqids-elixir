---
name: CI

on:
  pull_request:
    types:
      - 'opened'
      - 'reopened'
    paths:
      - '.github/workflows/ci.yml'
      - 'lib/**'
      - 'mix.*'
      - 'priv/**'
      - 'test/**'

  push:
    paths:
      - '.github/workflows/ci.yml'
      - 'lib/**'
      - 'mix.*'
      - 'priv/**'
      - 'test/**'

  workflow_dispatch: # enables "click to run" button

env:
  ELIXIR_VERSION_ON_WHICH_TO_CHECK_STYLE: '1.16' # Should be highest in matrix
  ELIXIR_VERSIONS_ON_WHICH_TO_RUN_DIALYZER: "['1.12', '1.13', '1.14', '1.15', '1.16']"

jobs:
  ci:
    name: >
      Run CI with Elixir ${{matrix.elixir_vsn}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        elixir_vsn: [
          '1.7',
          '1.8',
          '1.9',
          '1.10',
          '1.11',
          '1.12',
          '1.13',
          '1.14',
          '1.15',
          '1.16'
        ]
        os: ['ubuntu-20.04']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: elixir-version-to-otp-version
        name: "Read %{Elixir version => OTP version} map"
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.github/workflows/elixir_version_to_otp_version.json

      - id: setup-beam
        name: Setup BEAM
        uses: erlef/setup-beam@v1
        with:
          # otp-version: https://stackoverflow.com/a/64405821
          otp-version: |
            ${{ fromJson(steps.elixir-version-to-otp-version.outputs.content)[matrix.elixir_vsn] }}
          elixir-version: ${{matrix.elixir_vsn}}
        env:
          GITHUB_TOKEN: ${{github.token}}

      - name: Set dynamic env (1)
        run: |
          echo "PREV_GITHUB_RUN_NR=$((${{github.run_number}} - 1))" >> "$GITHUB_ENV"
          echo "BUILD_CACHE_PREFIX=build-cache-for-os-${{runner.os}}-elixir-${{steps.setup-beam.outputs.elixir-version}}-on-otp-${{steps.setup-beam.outputs.otp-version}}" >> "$GITHUB_ENV"

      - name: Set dynamic env (2)
        run: |
          echo "BUILD_CACHE_PREFIX_WITH_HASH=${{env.BUILD_CACHE_PREFIX}}-hash-${{hashFiles('mix.lock')}}" >> "$GITHUB_ENV"

      - name: Restore cached build artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            _build
            deps
          # Since the caching action doesn't support overwrite, we use a
          # different key for every run while trying to restore cache using a
          # previous run - this allows the cache to not stale.
          key: ${{env.BUILD_CACHE_PREFIX_WITH_HASH}}-${{env.PREV_GITHUB_RUN_NR}}
          restore-keys: |
            ${{env.BUILD_CACHE_PREFIX_WITH_HASH}}-
            ${{env.BUILD_CACHE_PREFIX}}-

      - name: Refresh dependencies
        run: mix do deps.get, deps.clean --unused

      - name: Assert code is formatted
        if: ${{matrix.elixir_vsn == env.ELIXIR_VERSION_ON_WHICH_TO_CHECK_STYLE}}
        run: mix format --check-formatted

      - name: Run Credo
        if: ${{matrix.elixir_vsn == env.ELIXIR_VERSION_ON_WHICH_TO_CHECK_STYLE}}
        run: mix credo --strict

      - name: Run tests
        run: mix test --cover

      - name: Run Dialyzer
        if: ${{contains(fromJson(env.ELIXIR_VERSIONS_ON_WHICH_TO_RUN_DIALYZER), matrix.elixir_vsn)}}
        run: MIX_ENV=test mix dialyzer

      - name: Save build artifacts to cache
        # We always save to cache, even on failure, so that whatever artifacts
        # took a long time to generate are kept (looking at you, Dialyzer PLT)
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            _build
            deps
          key: ${{env.BUILD_CACHE_PREFIX_WITH_HASH}}-${{github.run_number}}
